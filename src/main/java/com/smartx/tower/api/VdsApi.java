/*
 * CloudTower APIs
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetVdsesConnectionRequestBody;
import com.smartx.tower.model.GetVdsesRequestBody;
import com.smartx.tower.model.Vds;
import com.smartx.tower.model.VdsConnection;
import com.smartx.tower.model.VdsCreationParams;
import com.smartx.tower.model.VdsCreationWithMAccessVlanParams;
import com.smartx.tower.model.VdsCreationWithMigrateVlanParams;
import com.smartx.tower.model.VdsDeletionParams;
import com.smartx.tower.model.VdsUpdationParams;
import com.smartx.tower.model.WithTaskDeleteVds;
import com.smartx.tower.model.WithTaskVds;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VdsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VdsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VdsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVds
     * @param vdsCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVdsCall(List<VdsCreationParams> vdsCreationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vdsCreationParams;

        // create path and map variables
        String localVarPath = "/create-vds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVdsValidateBeforeCall(List<VdsCreationParams> vdsCreationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vdsCreationParams' is set
        if (vdsCreationParams == null) {
            throw new ApiException("Missing the required parameter 'vdsCreationParams' when calling createVds(Async)");
        }
        

        okhttp3.Call localVarCall = createVdsCall(vdsCreationParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vdsCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVds> createVds(List<VdsCreationParams> vdsCreationParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVds>> localVarResp = createVdsWithHttpInfo(vdsCreationParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vdsCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVds&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVds>> createVdsWithHttpInfo(List<VdsCreationParams> vdsCreationParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = createVdsValidateBeforeCall(vdsCreationParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVds>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vdsCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVdsAsync(List<VdsCreationParams> vdsCreationParams, String contentLanguage, final ApiCallback<List<WithTaskVds>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVdsValidateBeforeCall(vdsCreationParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVds>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVdsWithAccessVlan
     * @param vdsCreationWithMAccessVlanParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVdsWithAccessVlanCall(List<VdsCreationWithMAccessVlanParams> vdsCreationWithMAccessVlanParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vdsCreationWithMAccessVlanParams;

        // create path and map variables
        String localVarPath = "/create-vds-with-access-vlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVdsWithAccessVlanValidateBeforeCall(List<VdsCreationWithMAccessVlanParams> vdsCreationWithMAccessVlanParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vdsCreationWithMAccessVlanParams' is set
        if (vdsCreationWithMAccessVlanParams == null) {
            throw new ApiException("Missing the required parameter 'vdsCreationWithMAccessVlanParams' when calling createVdsWithAccessVlan(Async)");
        }
        

        okhttp3.Call localVarCall = createVdsWithAccessVlanCall(vdsCreationWithMAccessVlanParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vdsCreationWithMAccessVlanParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVds> createVdsWithAccessVlan(List<VdsCreationWithMAccessVlanParams> vdsCreationWithMAccessVlanParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVds>> localVarResp = createVdsWithAccessVlanWithHttpInfo(vdsCreationWithMAccessVlanParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vdsCreationWithMAccessVlanParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVds&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVds>> createVdsWithAccessVlanWithHttpInfo(List<VdsCreationWithMAccessVlanParams> vdsCreationWithMAccessVlanParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = createVdsWithAccessVlanValidateBeforeCall(vdsCreationWithMAccessVlanParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVds>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vdsCreationWithMAccessVlanParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVdsWithAccessVlanAsync(List<VdsCreationWithMAccessVlanParams> vdsCreationWithMAccessVlanParams, String contentLanguage, final ApiCallback<List<WithTaskVds>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVdsWithAccessVlanValidateBeforeCall(vdsCreationWithMAccessVlanParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVds>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVdsWithMigrateVlan
     * @param vdsCreationWithMigrateVlanParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVdsWithMigrateVlanCall(List<VdsCreationWithMigrateVlanParams> vdsCreationWithMigrateVlanParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vdsCreationWithMigrateVlanParams;

        // create path and map variables
        String localVarPath = "/create-vds-with-migrate-vlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVdsWithMigrateVlanValidateBeforeCall(List<VdsCreationWithMigrateVlanParams> vdsCreationWithMigrateVlanParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vdsCreationWithMigrateVlanParams' is set
        if (vdsCreationWithMigrateVlanParams == null) {
            throw new ApiException("Missing the required parameter 'vdsCreationWithMigrateVlanParams' when calling createVdsWithMigrateVlan(Async)");
        }
        

        okhttp3.Call localVarCall = createVdsWithMigrateVlanCall(vdsCreationWithMigrateVlanParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vdsCreationWithMigrateVlanParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVds> createVdsWithMigrateVlan(List<VdsCreationWithMigrateVlanParams> vdsCreationWithMigrateVlanParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVds>> localVarResp = createVdsWithMigrateVlanWithHttpInfo(vdsCreationWithMigrateVlanParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vdsCreationWithMigrateVlanParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVds&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVds>> createVdsWithMigrateVlanWithHttpInfo(List<VdsCreationWithMigrateVlanParams> vdsCreationWithMigrateVlanParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = createVdsWithMigrateVlanValidateBeforeCall(vdsCreationWithMigrateVlanParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVds>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vdsCreationWithMigrateVlanParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVdsWithMigrateVlanAsync(List<VdsCreationWithMigrateVlanParams> vdsCreationWithMigrateVlanParams, String contentLanguage, final ApiCallback<List<WithTaskVds>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVdsWithMigrateVlanValidateBeforeCall(vdsCreationWithMigrateVlanParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVds>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVds
     * @param vdsDeletionParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVdsCall(VdsDeletionParams vdsDeletionParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vdsDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-vds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVdsValidateBeforeCall(VdsDeletionParams vdsDeletionParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vdsDeletionParams' is set
        if (vdsDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'vdsDeletionParams' when calling deleteVds(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVdsCall(vdsDeletionParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vdsDeletionParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskDeleteVds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteVds> deleteVds(VdsDeletionParams vdsDeletionParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskDeleteVds>> localVarResp = deleteVdsWithHttpInfo(vdsDeletionParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vdsDeletionParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteVds&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteVds>> deleteVdsWithHttpInfo(VdsDeletionParams vdsDeletionParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = deleteVdsValidateBeforeCall(vdsDeletionParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVds>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vdsDeletionParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVdsAsync(VdsDeletionParams vdsDeletionParams, String contentLanguage, final ApiCallback<List<WithTaskDeleteVds>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVdsValidateBeforeCall(vdsDeletionParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVds>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVdses
     * @param getVdsesRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdsesCall(GetVdsesRequestBody getVdsesRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getVdsesRequestBody;

        // create path and map variables
        String localVarPath = "/get-vdses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVdsesValidateBeforeCall(GetVdsesRequestBody getVdsesRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getVdsesRequestBody' is set
        if (getVdsesRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVdsesRequestBody' when calling getVdses(Async)");
        }
        

        okhttp3.Call localVarCall = getVdsesCall(getVdsesRequestBody, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getVdsesRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;Vds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Vds> getVdses(GetVdsesRequestBody getVdsesRequestBody, String contentLanguage) throws ApiException {
        ApiResponse<List<Vds>> localVarResp = getVdsesWithHttpInfo(getVdsesRequestBody, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getVdsesRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;Vds&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vds>> getVdsesWithHttpInfo(GetVdsesRequestBody getVdsesRequestBody, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = getVdsesValidateBeforeCall(getVdsesRequestBody, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<Vds>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getVdsesRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdsesAsync(GetVdsesRequestBody getVdsesRequestBody, String contentLanguage, final ApiCallback<List<Vds>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVdsesValidateBeforeCall(getVdsesRequestBody, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<Vds>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVdsesConnection
     * @param getVdsesConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdsesConnectionCall(GetVdsesConnectionRequestBody getVdsesConnectionRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getVdsesConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-vdses-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVdsesConnectionValidateBeforeCall(GetVdsesConnectionRequestBody getVdsesConnectionRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getVdsesConnectionRequestBody' is set
        if (getVdsesConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVdsesConnectionRequestBody' when calling getVdsesConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getVdsesConnectionCall(getVdsesConnectionRequestBody, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getVdsesConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return VdsConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VdsConnection getVdsesConnection(GetVdsesConnectionRequestBody getVdsesConnectionRequestBody, String contentLanguage) throws ApiException {
        ApiResponse<VdsConnection> localVarResp = getVdsesConnectionWithHttpInfo(getVdsesConnectionRequestBody, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getVdsesConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;VdsConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VdsConnection> getVdsesConnectionWithHttpInfo(GetVdsesConnectionRequestBody getVdsesConnectionRequestBody, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = getVdsesConnectionValidateBeforeCall(getVdsesConnectionRequestBody, contentLanguage, null);
        Type localVarReturnType = new TypeToken<VdsConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getVdsesConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdsesConnectionAsync(GetVdsesConnectionRequestBody getVdsesConnectionRequestBody, String contentLanguage, final ApiCallback<VdsConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVdsesConnectionValidateBeforeCall(getVdsesConnectionRequestBody, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<VdsConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVds
     * @param vdsUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVdsCall(VdsUpdationParams vdsUpdationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vdsUpdationParams;

        // create path and map variables
        String localVarPath = "/update-vds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVdsValidateBeforeCall(VdsUpdationParams vdsUpdationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vdsUpdationParams' is set
        if (vdsUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'vdsUpdationParams' when calling updateVds(Async)");
        }
        

        okhttp3.Call localVarCall = updateVdsCall(vdsUpdationParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vdsUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVds> updateVds(VdsUpdationParams vdsUpdationParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVds>> localVarResp = updateVdsWithHttpInfo(vdsUpdationParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vdsUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVds&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVds>> updateVdsWithHttpInfo(VdsUpdationParams vdsUpdationParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateVdsValidateBeforeCall(vdsUpdationParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVds>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vdsUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVdsAsync(VdsUpdationParams vdsUpdationParams, String contentLanguage, final ApiCallback<List<WithTaskVds>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVdsValidateBeforeCall(vdsUpdationParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVds>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
