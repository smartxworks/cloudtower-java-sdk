/*
 * CloudTower APIs
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.ErrorBody;
import com.smartx.tower.model.GetUsersConnectionRequestBody;
import com.smartx.tower.model.GetUsersRequestBody;
import com.smartx.tower.model.LoginInput;
import com.smartx.tower.model.RootUserCreationParams;
import com.smartx.tower.model.User;
import com.smartx.tower.model.UserConnection;
import com.smartx.tower.model.UserCreationParams;
import com.smartx.tower.model.UserDeletionParams;
import com.smartx.tower.model.UserUpdationParams;
import com.smartx.tower.model.WithTaskDeleteUser;
import com.smartx.tower.model.WithTaskTokenString;
import com.smartx.tower.model.WithTaskUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRootUser
     * @param rootUserCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRootUserCall(RootUserCreationParams rootUserCreationParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rootUserCreationParams;

        // create path and map variables
        String localVarPath = "/create-root-user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRootUserValidateBeforeCall(RootUserCreationParams rootUserCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rootUserCreationParams' is set
        if (rootUserCreationParams == null) {
            throw new ApiException("Missing the required parameter 'rootUserCreationParams' when calling createRootUser(Async)");
        }
        

        okhttp3.Call localVarCall = createRootUserCall(rootUserCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param rootUserCreationParams  (required)
     * @return WithTaskUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public WithTaskUser createRootUser(RootUserCreationParams rootUserCreationParams) throws ApiException {
        ApiResponse<WithTaskUser> localVarResp = createRootUserWithHttpInfo(rootUserCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rootUserCreationParams  (required)
     * @return ApiResponse&lt;WithTaskUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WithTaskUser> createRootUserWithHttpInfo(RootUserCreationParams rootUserCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createRootUserValidateBeforeCall(rootUserCreationParams, null);
        Type localVarReturnType = new TypeToken<WithTaskUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rootUserCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRootUserAsync(RootUserCreationParams rootUserCreationParams, final ApiCallback<WithTaskUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRootUserValidateBeforeCall(rootUserCreationParams, _callback);
        Type localVarReturnType = new TypeToken<WithTaskUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param userCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(List<UserCreationParams> userCreationParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCreationParams;

        // create path and map variables
        String localVarPath = "/create-user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(List<UserCreationParams> userCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userCreationParams' is set
        if (userCreationParams == null) {
            throw new ApiException("Missing the required parameter 'userCreationParams' when calling createUser(Async)");
        }
        

        okhttp3.Call localVarCall = createUserCall(userCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userCreationParams  (required)
     * @return List&lt;WithTaskUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskUser> createUser(List<UserCreationParams> userCreationParams) throws ApiException {
        ApiResponse<List<WithTaskUser>> localVarResp = createUserWithHttpInfo(userCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskUser>> createUserWithHttpInfo(List<UserCreationParams> userCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(userCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(List<UserCreationParams> userCreationParams, final ApiCallback<List<WithTaskUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(userCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param userDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(UserDeletionParams userDeletionParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(UserDeletionParams userDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userDeletionParams' is set
        if (userDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'userDeletionParams' when calling deleteUser(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserCall(userDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userDeletionParams  (required)
     * @return List&lt;WithTaskDeleteUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteUser> deleteUser(UserDeletionParams userDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteUser>> localVarResp = deleteUserWithHttpInfo(userDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteUser>> deleteUserWithHttpInfo(UserDeletionParams userDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(UserDeletionParams userDeletionParams, final ApiCallback<List<WithTaskDeleteUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param getUsersRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(GetUsersRequestBody getUsersRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUsersRequestBody;

        // create path and map variables
        String localVarPath = "/get-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(GetUsersRequestBody getUsersRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getUsersRequestBody' is set
        if (getUsersRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getUsersRequestBody' when calling getUsers(Async)");
        }
        

        okhttp3.Call localVarCall = getUsersCall(getUsersRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getUsersRequestBody  (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getUsers(GetUsersRequestBody getUsersRequestBody) throws ApiException {
        ApiResponse<List<User>> localVarResp = getUsersWithHttpInfo(getUsersRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getUsersRequestBody  (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getUsersWithHttpInfo(GetUsersRequestBody getUsersRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(getUsersRequestBody, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getUsersRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(GetUsersRequestBody getUsersRequestBody, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(getUsersRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersConnection
     * @param getUsersConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersConnectionCall(GetUsersConnectionRequestBody getUsersConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUsersConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-users-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersConnectionValidateBeforeCall(GetUsersConnectionRequestBody getUsersConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getUsersConnectionRequestBody' is set
        if (getUsersConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getUsersConnectionRequestBody' when calling getUsersConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getUsersConnectionCall(getUsersConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getUsersConnectionRequestBody  (required)
     * @return UserConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public UserConnection getUsersConnection(GetUsersConnectionRequestBody getUsersConnectionRequestBody) throws ApiException {
        ApiResponse<UserConnection> localVarResp = getUsersConnectionWithHttpInfo(getUsersConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getUsersConnectionRequestBody  (required)
     * @return ApiResponse&lt;UserConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserConnection> getUsersConnectionWithHttpInfo(GetUsersConnectionRequestBody getUsersConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getUsersConnectionValidateBeforeCall(getUsersConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<UserConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getUsersConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersConnectionAsync(GetUsersConnectionRequestBody getUsersConnectionRequestBody, final ApiCallback<UserConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersConnectionValidateBeforeCall(getUsersConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<UserConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for login
     * @param loginInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginCall(LoginInput loginInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loginInput;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(LoginInput loginInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loginInput' is set
        if (loginInput == null) {
            throw new ApiException("Missing the required parameter 'loginInput' when calling login(Async)");
        }
        

        okhttp3.Call localVarCall = loginCall(loginInput, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param loginInput  (required)
     * @return WithTaskTokenString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public WithTaskTokenString login(LoginInput loginInput) throws ApiException {
        ApiResponse<WithTaskTokenString> localVarResp = loginWithHttpInfo(loginInput);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param loginInput  (required)
     * @return ApiResponse&lt;WithTaskTokenString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WithTaskTokenString> loginWithHttpInfo(LoginInput loginInput) throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(loginInput, null);
        Type localVarReturnType = new TypeToken<WithTaskTokenString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param loginInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginAsync(LoginInput loginInput, final ApiCallback<WithTaskTokenString> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(loginInput, _callback);
        Type localVarReturnType = new TypeToken<WithTaskTokenString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param userUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(UserUpdationParams userUpdationParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userUpdationParams;

        // create path and map variables
        String localVarPath = "/update-user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(UserUpdationParams userUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userUpdationParams' is set
        if (userUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'userUpdationParams' when calling updateUser(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserCall(userUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userUpdationParams  (required)
     * @return List&lt;WithTaskUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskUser> updateUser(UserUpdationParams userUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskUser>> localVarResp = updateUserWithHttpInfo(userUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskUser>> updateUserWithHttpInfo(UserUpdationParams userUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(UserUpdationParams userUpdationParams, final ApiCallback<List<WithTaskUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
