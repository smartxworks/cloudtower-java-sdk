/*
 * CloudTower APIs
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.GetVmPlacementGroupsConnectionRequestBody;
import com.smartx.tower.model.GetVmPlacementGroupsRequestBody;
import com.smartx.tower.model.VmPlacementGroup;
import com.smartx.tower.model.VmPlacementGroupConnection;
import com.smartx.tower.model.VmPlacementGroupCreationParams;
import com.smartx.tower.model.VmPlacementGroupDeletionParams;
import com.smartx.tower.model.VmPlacementGroupUpdationParams;
import com.smartx.tower.model.WithTaskDeleteVmPlacementGroup;
import com.smartx.tower.model.WithTaskVmPlacementGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VmPlacementGroupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VmPlacementGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VmPlacementGroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVmPlacementGroup
     * @param vmPlacementGroupCreationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmPlacementGroupCall(List<VmPlacementGroupCreationParams> vmPlacementGroupCreationParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmPlacementGroupCreationParams;

        // create path and map variables
        String localVarPath = "/create-vm-placement-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVmPlacementGroupValidateBeforeCall(List<VmPlacementGroupCreationParams> vmPlacementGroupCreationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmPlacementGroupCreationParams' is set
        if (vmPlacementGroupCreationParams == null) {
            throw new ApiException("Missing the required parameter 'vmPlacementGroupCreationParams' when calling createVmPlacementGroup(Async)");
        }
        

        okhttp3.Call localVarCall = createVmPlacementGroupCall(vmPlacementGroupCreationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmPlacementGroupCreationParams  (required)
     * @return List&lt;WithTaskVmPlacementGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVmPlacementGroup> createVmPlacementGroup(List<VmPlacementGroupCreationParams> vmPlacementGroupCreationParams) throws ApiException {
        ApiResponse<List<WithTaskVmPlacementGroup>> localVarResp = createVmPlacementGroupWithHttpInfo(vmPlacementGroupCreationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmPlacementGroupCreationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVmPlacementGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVmPlacementGroup>> createVmPlacementGroupWithHttpInfo(List<VmPlacementGroupCreationParams> vmPlacementGroupCreationParams) throws ApiException {
        okhttp3.Call localVarCall = createVmPlacementGroupValidateBeforeCall(vmPlacementGroupCreationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVmPlacementGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmPlacementGroupCreationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmPlacementGroupAsync(List<VmPlacementGroupCreationParams> vmPlacementGroupCreationParams, final ApiCallback<List<WithTaskVmPlacementGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVmPlacementGroupValidateBeforeCall(vmPlacementGroupCreationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVmPlacementGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVmPlacementGroup
     * @param vmPlacementGroupDeletionParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVmPlacementGroupCall(VmPlacementGroupDeletionParams vmPlacementGroupDeletionParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmPlacementGroupDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-vm-placement-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVmPlacementGroupValidateBeforeCall(VmPlacementGroupDeletionParams vmPlacementGroupDeletionParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmPlacementGroupDeletionParams' is set
        if (vmPlacementGroupDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'vmPlacementGroupDeletionParams' when calling deleteVmPlacementGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVmPlacementGroupCall(vmPlacementGroupDeletionParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmPlacementGroupDeletionParams  (required)
     * @return List&lt;WithTaskDeleteVmPlacementGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteVmPlacementGroup> deleteVmPlacementGroup(VmPlacementGroupDeletionParams vmPlacementGroupDeletionParams) throws ApiException {
        ApiResponse<List<WithTaskDeleteVmPlacementGroup>> localVarResp = deleteVmPlacementGroupWithHttpInfo(vmPlacementGroupDeletionParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmPlacementGroupDeletionParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteVmPlacementGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteVmPlacementGroup>> deleteVmPlacementGroupWithHttpInfo(VmPlacementGroupDeletionParams vmPlacementGroupDeletionParams) throws ApiException {
        okhttp3.Call localVarCall = deleteVmPlacementGroupValidateBeforeCall(vmPlacementGroupDeletionParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVmPlacementGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmPlacementGroupDeletionParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVmPlacementGroupAsync(VmPlacementGroupDeletionParams vmPlacementGroupDeletionParams, final ApiCallback<List<WithTaskDeleteVmPlacementGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVmPlacementGroupValidateBeforeCall(vmPlacementGroupDeletionParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVmPlacementGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVmPlacementGroups
     * @param getVmPlacementGroupsRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmPlacementGroupsCall(GetVmPlacementGroupsRequestBody getVmPlacementGroupsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getVmPlacementGroupsRequestBody;

        // create path and map variables
        String localVarPath = "/get-vm-placement-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVmPlacementGroupsValidateBeforeCall(GetVmPlacementGroupsRequestBody getVmPlacementGroupsRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getVmPlacementGroupsRequestBody' is set
        if (getVmPlacementGroupsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVmPlacementGroupsRequestBody' when calling getVmPlacementGroups(Async)");
        }
        

        okhttp3.Call localVarCall = getVmPlacementGroupsCall(getVmPlacementGroupsRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getVmPlacementGroupsRequestBody  (required)
     * @return List&lt;VmPlacementGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<VmPlacementGroup> getVmPlacementGroups(GetVmPlacementGroupsRequestBody getVmPlacementGroupsRequestBody) throws ApiException {
        ApiResponse<List<VmPlacementGroup>> localVarResp = getVmPlacementGroupsWithHttpInfo(getVmPlacementGroupsRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getVmPlacementGroupsRequestBody  (required)
     * @return ApiResponse&lt;List&lt;VmPlacementGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VmPlacementGroup>> getVmPlacementGroupsWithHttpInfo(GetVmPlacementGroupsRequestBody getVmPlacementGroupsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getVmPlacementGroupsValidateBeforeCall(getVmPlacementGroupsRequestBody, null);
        Type localVarReturnType = new TypeToken<List<VmPlacementGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getVmPlacementGroupsRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmPlacementGroupsAsync(GetVmPlacementGroupsRequestBody getVmPlacementGroupsRequestBody, final ApiCallback<List<VmPlacementGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVmPlacementGroupsValidateBeforeCall(getVmPlacementGroupsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<VmPlacementGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVmPlacementGroupsConnection
     * @param getVmPlacementGroupsConnectionRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmPlacementGroupsConnectionCall(GetVmPlacementGroupsConnectionRequestBody getVmPlacementGroupsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getVmPlacementGroupsConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-vm-placement-groups-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVmPlacementGroupsConnectionValidateBeforeCall(GetVmPlacementGroupsConnectionRequestBody getVmPlacementGroupsConnectionRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getVmPlacementGroupsConnectionRequestBody' is set
        if (getVmPlacementGroupsConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVmPlacementGroupsConnectionRequestBody' when calling getVmPlacementGroupsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getVmPlacementGroupsConnectionCall(getVmPlacementGroupsConnectionRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getVmPlacementGroupsConnectionRequestBody  (required)
     * @return VmPlacementGroupConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VmPlacementGroupConnection getVmPlacementGroupsConnection(GetVmPlacementGroupsConnectionRequestBody getVmPlacementGroupsConnectionRequestBody) throws ApiException {
        ApiResponse<VmPlacementGroupConnection> localVarResp = getVmPlacementGroupsConnectionWithHttpInfo(getVmPlacementGroupsConnectionRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getVmPlacementGroupsConnectionRequestBody  (required)
     * @return ApiResponse&lt;VmPlacementGroupConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VmPlacementGroupConnection> getVmPlacementGroupsConnectionWithHttpInfo(GetVmPlacementGroupsConnectionRequestBody getVmPlacementGroupsConnectionRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getVmPlacementGroupsConnectionValidateBeforeCall(getVmPlacementGroupsConnectionRequestBody, null);
        Type localVarReturnType = new TypeToken<VmPlacementGroupConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getVmPlacementGroupsConnectionRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmPlacementGroupsConnectionAsync(GetVmPlacementGroupsConnectionRequestBody getVmPlacementGroupsConnectionRequestBody, final ApiCallback<VmPlacementGroupConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVmPlacementGroupsConnectionValidateBeforeCall(getVmPlacementGroupsConnectionRequestBody, _callback);
        Type localVarReturnType = new TypeToken<VmPlacementGroupConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVmPlacementGroup
     * @param vmPlacementGroupUpdationParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmPlacementGroupCall(VmPlacementGroupUpdationParams vmPlacementGroupUpdationParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmPlacementGroupUpdationParams;

        // create path and map variables
        String localVarPath = "/update-vm-placement-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVmPlacementGroupValidateBeforeCall(VmPlacementGroupUpdationParams vmPlacementGroupUpdationParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmPlacementGroupUpdationParams' is set
        if (vmPlacementGroupUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'vmPlacementGroupUpdationParams' when calling updateVmPlacementGroup(Async)");
        }
        

        okhttp3.Call localVarCall = updateVmPlacementGroupCall(vmPlacementGroupUpdationParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmPlacementGroupUpdationParams  (required)
     * @return List&lt;WithTaskVmPlacementGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVmPlacementGroup> updateVmPlacementGroup(VmPlacementGroupUpdationParams vmPlacementGroupUpdationParams) throws ApiException {
        ApiResponse<List<WithTaskVmPlacementGroup>> localVarResp = updateVmPlacementGroupWithHttpInfo(vmPlacementGroupUpdationParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmPlacementGroupUpdationParams  (required)
     * @return ApiResponse&lt;List&lt;WithTaskVmPlacementGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVmPlacementGroup>> updateVmPlacementGroupWithHttpInfo(VmPlacementGroupUpdationParams vmPlacementGroupUpdationParams) throws ApiException {
        okhttp3.Call localVarCall = updateVmPlacementGroupValidateBeforeCall(vmPlacementGroupUpdationParams, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVmPlacementGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmPlacementGroupUpdationParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmPlacementGroupAsync(VmPlacementGroupUpdationParams vmPlacementGroupUpdationParams, final ApiCallback<List<WithTaskVmPlacementGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVmPlacementGroupValidateBeforeCall(vmPlacementGroupUpdationParams, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVmPlacementGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
