/*
 * CloudTower APIs
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.ClusterRecycleBinCreationParams;
import com.smartx.tower.model.ClusterRecycleBinDeletionParams;
import com.smartx.tower.model.ClusterRecycleBinUpdationParams;
import com.smartx.tower.model.GetGlobalSettingsesConnectionRequestBody;
import com.smartx.tower.model.GetGlobalSettingsesRequestBody;
import com.smartx.tower.model.GlobalRecycleBinUpdationParams;
import com.smartx.tower.model.GlobalSettings;
import com.smartx.tower.model.GlobalSettingsConnection;
import com.smartx.tower.model.WithTaskClusterSettings;
import com.smartx.tower.model.WithTaskDeleteClusterRecycleBin;
import com.smartx.tower.model.WithTaskGlobalSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createClusterRecycleBinSetting
     * @param clusterRecycleBinCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClusterRecycleBinSettingCall(ClusterRecycleBinCreationParams clusterRecycleBinCreationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clusterRecycleBinCreationParams;

        // create path and map variables
        String localVarPath = "/create-cluster-recycle-bin-setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClusterRecycleBinSettingValidateBeforeCall(ClusterRecycleBinCreationParams clusterRecycleBinCreationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clusterRecycleBinCreationParams' is set
        if (clusterRecycleBinCreationParams == null) {
            throw new ApiException("Missing the required parameter 'clusterRecycleBinCreationParams' when calling createClusterRecycleBinSetting(Async)");
        }
        

        okhttp3.Call localVarCall = createClusterRecycleBinSettingCall(clusterRecycleBinCreationParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param clusterRecycleBinCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskClusterSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskClusterSettings> createClusterRecycleBinSetting(ClusterRecycleBinCreationParams clusterRecycleBinCreationParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskClusterSettings>> localVarResp = createClusterRecycleBinSettingWithHttpInfo(clusterRecycleBinCreationParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clusterRecycleBinCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskClusterSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskClusterSettings>> createClusterRecycleBinSettingWithHttpInfo(ClusterRecycleBinCreationParams clusterRecycleBinCreationParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = createClusterRecycleBinSettingValidateBeforeCall(clusterRecycleBinCreationParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskClusterSettings>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clusterRecycleBinCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClusterRecycleBinSettingAsync(ClusterRecycleBinCreationParams clusterRecycleBinCreationParams, String contentLanguage, final ApiCallback<List<WithTaskClusterSettings>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClusterRecycleBinSettingValidateBeforeCall(clusterRecycleBinCreationParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskClusterSettings>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteClusterRecycleBinSetting
     * @param clusterRecycleBinDeletionParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterRecycleBinSettingCall(ClusterRecycleBinDeletionParams clusterRecycleBinDeletionParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clusterRecycleBinDeletionParams;

        // create path and map variables
        String localVarPath = "/delete-cluster-recycle-bin-setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClusterRecycleBinSettingValidateBeforeCall(ClusterRecycleBinDeletionParams clusterRecycleBinDeletionParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clusterRecycleBinDeletionParams' is set
        if (clusterRecycleBinDeletionParams == null) {
            throw new ApiException("Missing the required parameter 'clusterRecycleBinDeletionParams' when calling deleteClusterRecycleBinSetting(Async)");
        }
        

        okhttp3.Call localVarCall = deleteClusterRecycleBinSettingCall(clusterRecycleBinDeletionParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param clusterRecycleBinDeletionParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskDeleteClusterRecycleBin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteClusterRecycleBin> deleteClusterRecycleBinSetting(ClusterRecycleBinDeletionParams clusterRecycleBinDeletionParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskDeleteClusterRecycleBin>> localVarResp = deleteClusterRecycleBinSettingWithHttpInfo(clusterRecycleBinDeletionParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clusterRecycleBinDeletionParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteClusterRecycleBin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteClusterRecycleBin>> deleteClusterRecycleBinSettingWithHttpInfo(ClusterRecycleBinDeletionParams clusterRecycleBinDeletionParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = deleteClusterRecycleBinSettingValidateBeforeCall(clusterRecycleBinDeletionParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteClusterRecycleBin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clusterRecycleBinDeletionParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterRecycleBinSettingAsync(ClusterRecycleBinDeletionParams clusterRecycleBinDeletionParams, String contentLanguage, final ApiCallback<List<WithTaskDeleteClusterRecycleBin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClusterRecycleBinSettingValidateBeforeCall(clusterRecycleBinDeletionParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteClusterRecycleBin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGlobalSettingses
     * @param getGlobalSettingsesRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalSettingsesCall(GetGlobalSettingsesRequestBody getGlobalSettingsesRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGlobalSettingsesRequestBody;

        // create path and map variables
        String localVarPath = "/get-global-settingses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalSettingsesValidateBeforeCall(GetGlobalSettingsesRequestBody getGlobalSettingsesRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getGlobalSettingsesRequestBody' is set
        if (getGlobalSettingsesRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getGlobalSettingsesRequestBody' when calling getGlobalSettingses(Async)");
        }
        

        okhttp3.Call localVarCall = getGlobalSettingsesCall(getGlobalSettingsesRequestBody, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getGlobalSettingsesRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;GlobalSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<GlobalSettings> getGlobalSettingses(GetGlobalSettingsesRequestBody getGlobalSettingsesRequestBody, String contentLanguage) throws ApiException {
        ApiResponse<List<GlobalSettings>> localVarResp = getGlobalSettingsesWithHttpInfo(getGlobalSettingsesRequestBody, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getGlobalSettingsesRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;GlobalSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GlobalSettings>> getGlobalSettingsesWithHttpInfo(GetGlobalSettingsesRequestBody getGlobalSettingsesRequestBody, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = getGlobalSettingsesValidateBeforeCall(getGlobalSettingsesRequestBody, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<GlobalSettings>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getGlobalSettingsesRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalSettingsesAsync(GetGlobalSettingsesRequestBody getGlobalSettingsesRequestBody, String contentLanguage, final ApiCallback<List<GlobalSettings>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalSettingsesValidateBeforeCall(getGlobalSettingsesRequestBody, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<GlobalSettings>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGlobalSettingsesConnection
     * @param getGlobalSettingsesConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalSettingsesConnectionCall(GetGlobalSettingsesConnectionRequestBody getGlobalSettingsesConnectionRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGlobalSettingsesConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-global-settingses-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalSettingsesConnectionValidateBeforeCall(GetGlobalSettingsesConnectionRequestBody getGlobalSettingsesConnectionRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getGlobalSettingsesConnectionRequestBody' is set
        if (getGlobalSettingsesConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getGlobalSettingsesConnectionRequestBody' when calling getGlobalSettingsesConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getGlobalSettingsesConnectionCall(getGlobalSettingsesConnectionRequestBody, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getGlobalSettingsesConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return GlobalSettingsConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GlobalSettingsConnection getGlobalSettingsesConnection(GetGlobalSettingsesConnectionRequestBody getGlobalSettingsesConnectionRequestBody, String contentLanguage) throws ApiException {
        ApiResponse<GlobalSettingsConnection> localVarResp = getGlobalSettingsesConnectionWithHttpInfo(getGlobalSettingsesConnectionRequestBody, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getGlobalSettingsesConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;GlobalSettingsConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalSettingsConnection> getGlobalSettingsesConnectionWithHttpInfo(GetGlobalSettingsesConnectionRequestBody getGlobalSettingsesConnectionRequestBody, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = getGlobalSettingsesConnectionValidateBeforeCall(getGlobalSettingsesConnectionRequestBody, contentLanguage, null);
        Type localVarReturnType = new TypeToken<GlobalSettingsConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getGlobalSettingsesConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalSettingsesConnectionAsync(GetGlobalSettingsesConnectionRequestBody getGlobalSettingsesConnectionRequestBody, String contentLanguage, final ApiCallback<GlobalSettingsConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalSettingsesConnectionValidateBeforeCall(getGlobalSettingsesConnectionRequestBody, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<GlobalSettingsConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClusterRecycleBinSetting
     * @param clusterRecycleBinUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClusterRecycleBinSettingCall(ClusterRecycleBinUpdationParams clusterRecycleBinUpdationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clusterRecycleBinUpdationParams;

        // create path and map variables
        String localVarPath = "/update-cluster-recycle-bin-setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClusterRecycleBinSettingValidateBeforeCall(ClusterRecycleBinUpdationParams clusterRecycleBinUpdationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clusterRecycleBinUpdationParams' is set
        if (clusterRecycleBinUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'clusterRecycleBinUpdationParams' when calling updateClusterRecycleBinSetting(Async)");
        }
        

        okhttp3.Call localVarCall = updateClusterRecycleBinSettingCall(clusterRecycleBinUpdationParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param clusterRecycleBinUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskClusterSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskClusterSettings> updateClusterRecycleBinSetting(ClusterRecycleBinUpdationParams clusterRecycleBinUpdationParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskClusterSettings>> localVarResp = updateClusterRecycleBinSettingWithHttpInfo(clusterRecycleBinUpdationParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clusterRecycleBinUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskClusterSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskClusterSettings>> updateClusterRecycleBinSettingWithHttpInfo(ClusterRecycleBinUpdationParams clusterRecycleBinUpdationParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateClusterRecycleBinSettingValidateBeforeCall(clusterRecycleBinUpdationParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskClusterSettings>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clusterRecycleBinUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClusterRecycleBinSettingAsync(ClusterRecycleBinUpdationParams clusterRecycleBinUpdationParams, String contentLanguage, final ApiCallback<List<WithTaskClusterSettings>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClusterRecycleBinSettingValidateBeforeCall(clusterRecycleBinUpdationParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskClusterSettings>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalRecycleBinSetting
     * @param globalRecycleBinUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalRecycleBinSettingCall(GlobalRecycleBinUpdationParams globalRecycleBinUpdationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalRecycleBinUpdationParams;

        // create path and map variables
        String localVarPath = "/update-global-recycle-bin-setting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalRecycleBinSettingValidateBeforeCall(GlobalRecycleBinUpdationParams globalRecycleBinUpdationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'globalRecycleBinUpdationParams' is set
        if (globalRecycleBinUpdationParams == null) {
            throw new ApiException("Missing the required parameter 'globalRecycleBinUpdationParams' when calling updateGlobalRecycleBinSetting(Async)");
        }
        

        okhttp3.Call localVarCall = updateGlobalRecycleBinSettingCall(globalRecycleBinUpdationParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param globalRecycleBinUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return WithTaskGlobalSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WithTaskGlobalSettings updateGlobalRecycleBinSetting(GlobalRecycleBinUpdationParams globalRecycleBinUpdationParams, String contentLanguage) throws ApiException {
        ApiResponse<WithTaskGlobalSettings> localVarResp = updateGlobalRecycleBinSettingWithHttpInfo(globalRecycleBinUpdationParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param globalRecycleBinUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;WithTaskGlobalSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WithTaskGlobalSettings> updateGlobalRecycleBinSettingWithHttpInfo(GlobalRecycleBinUpdationParams globalRecycleBinUpdationParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalRecycleBinSettingValidateBeforeCall(globalRecycleBinUpdationParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<WithTaskGlobalSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param globalRecycleBinUpdationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalRecycleBinSettingAsync(GlobalRecycleBinUpdationParams globalRecycleBinUpdationParams, String contentLanguage, final ApiCallback<WithTaskGlobalSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalRecycleBinSettingValidateBeforeCall(globalRecycleBinUpdationParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<WithTaskGlobalSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
