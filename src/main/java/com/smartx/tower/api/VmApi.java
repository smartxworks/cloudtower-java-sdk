/*
 * CloudTower APIs
 * cloudtower operation API and SDK
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartx.tower.api;

import com.smartx.tower.ApiCallback;
import com.smartx.tower.ApiClient;
import com.smartx.tower.ApiException;
import com.smartx.tower.ApiResponse;
import com.smartx.tower.Configuration;
import com.smartx.tower.Pair;
import com.smartx.tower.ProgressRequestBody;
import com.smartx.tower.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartx.tower.model.ConvertVmTemplateToVmParams;
import com.smartx.tower.model.GetVmsConnectionRequestBody;
import com.smartx.tower.model.GetVmsRequestBody;
import com.smartx.tower.model.InstallVmtoolsParams;
import com.smartx.tower.model.Vm;
import com.smartx.tower.model.VmAddCdRomParams;
import com.smartx.tower.model.VmAddDiskParams;
import com.smartx.tower.model.VmAddFolderParams;
import com.smartx.tower.model.VmAddNicParams;
import com.smartx.tower.model.VmCloneParams;
import com.smartx.tower.model.VmConnection;
import com.smartx.tower.model.VmCreateVmFromTemplateParams;
import com.smartx.tower.model.VmCreationParams;
import com.smartx.tower.model.VmMigrateParams;
import com.smartx.tower.model.VmOperateParams;
import com.smartx.tower.model.VmRebuildParams;
import com.smartx.tower.model.VmRemoveCdRomParams;
import com.smartx.tower.model.VmRemoveDiskParams;
import com.smartx.tower.model.VmRemoveNicParams;
import com.smartx.tower.model.VmRollbackParams;
import com.smartx.tower.model.VmStartParams;
import com.smartx.tower.model.VmUpdateDiskParams;
import com.smartx.tower.model.VmUpdateNicParams;
import com.smartx.tower.model.VmUpdateParams;
import com.smartx.tower.model.WithTaskDeleteVm;
import com.smartx.tower.model.WithTaskVm;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VmApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VmApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVmCdRom
     * @param vmAddCdRomParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmCdRomCall(VmAddCdRomParams vmAddCdRomParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmAddCdRomParams;

        // create path and map variables
        String localVarPath = "/add-vm-cd-rom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVmCdRomValidateBeforeCall(VmAddCdRomParams vmAddCdRomParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmAddCdRomParams' is set
        if (vmAddCdRomParams == null) {
            throw new ApiException("Missing the required parameter 'vmAddCdRomParams' when calling addVmCdRom(Async)");
        }
        

        okhttp3.Call localVarCall = addVmCdRomCall(vmAddCdRomParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmAddCdRomParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> addVmCdRom(VmAddCdRomParams vmAddCdRomParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = addVmCdRomWithHttpInfo(vmAddCdRomParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmAddCdRomParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> addVmCdRomWithHttpInfo(VmAddCdRomParams vmAddCdRomParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = addVmCdRomValidateBeforeCall(vmAddCdRomParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmAddCdRomParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmCdRomAsync(VmAddCdRomParams vmAddCdRomParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVmCdRomValidateBeforeCall(vmAddCdRomParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVmDisk
     * @param vmAddDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmDiskCall(VmAddDiskParams vmAddDiskParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmAddDiskParams;

        // create path and map variables
        String localVarPath = "/add-vm-disk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVmDiskValidateBeforeCall(VmAddDiskParams vmAddDiskParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmAddDiskParams' is set
        if (vmAddDiskParams == null) {
            throw new ApiException("Missing the required parameter 'vmAddDiskParams' when calling addVmDisk(Async)");
        }
        

        okhttp3.Call localVarCall = addVmDiskCall(vmAddDiskParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmAddDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> addVmDisk(VmAddDiskParams vmAddDiskParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = addVmDiskWithHttpInfo(vmAddDiskParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmAddDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> addVmDiskWithHttpInfo(VmAddDiskParams vmAddDiskParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = addVmDiskValidateBeforeCall(vmAddDiskParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmAddDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmDiskAsync(VmAddDiskParams vmAddDiskParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVmDiskValidateBeforeCall(vmAddDiskParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVmNic
     * @param vmAddNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmNicCall(VmAddNicParams vmAddNicParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmAddNicParams;

        // create path and map variables
        String localVarPath = "/add-vm-nic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVmNicValidateBeforeCall(VmAddNicParams vmAddNicParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmAddNicParams' is set
        if (vmAddNicParams == null) {
            throw new ApiException("Missing the required parameter 'vmAddNicParams' when calling addVmNic(Async)");
        }
        

        okhttp3.Call localVarCall = addVmNicCall(vmAddNicParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmAddNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> addVmNic(VmAddNicParams vmAddNicParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = addVmNicWithHttpInfo(vmAddNicParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmAddNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> addVmNicWithHttpInfo(VmAddNicParams vmAddNicParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = addVmNicValidateBeforeCall(vmAddNicParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmAddNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmNicAsync(VmAddNicParams vmAddNicParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVmNicValidateBeforeCall(vmAddNicParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVmToFolder
     * @param vmAddFolderParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmToFolderCall(VmAddFolderParams vmAddFolderParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmAddFolderParams;

        // create path and map variables
        String localVarPath = "/add-vm-to-folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVmToFolderValidateBeforeCall(VmAddFolderParams vmAddFolderParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmAddFolderParams' is set
        if (vmAddFolderParams == null) {
            throw new ApiException("Missing the required parameter 'vmAddFolderParams' when calling addVmToFolder(Async)");
        }
        

        okhttp3.Call localVarCall = addVmToFolderCall(vmAddFolderParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmAddFolderParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> addVmToFolder(VmAddFolderParams vmAddFolderParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = addVmToFolderWithHttpInfo(vmAddFolderParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmAddFolderParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> addVmToFolderWithHttpInfo(VmAddFolderParams vmAddFolderParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = addVmToFolderValidateBeforeCall(vmAddFolderParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmAddFolderParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVmToFolderAsync(VmAddFolderParams vmAddFolderParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVmToFolderValidateBeforeCall(vmAddFolderParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloneVm
     * @param vmCloneParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneVmCall(List<VmCloneParams> vmCloneParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmCloneParams;

        // create path and map variables
        String localVarPath = "/clone-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneVmValidateBeforeCall(List<VmCloneParams> vmCloneParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmCloneParams' is set
        if (vmCloneParams == null) {
            throw new ApiException("Missing the required parameter 'vmCloneParams' when calling cloneVm(Async)");
        }
        

        okhttp3.Call localVarCall = cloneVmCall(vmCloneParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmCloneParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> cloneVm(List<VmCloneParams> vmCloneParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = cloneVmWithHttpInfo(vmCloneParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmCloneParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> cloneVmWithHttpInfo(List<VmCloneParams> vmCloneParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = cloneVmValidateBeforeCall(vmCloneParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmCloneParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloneVmAsync(List<VmCloneParams> vmCloneParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneVmValidateBeforeCall(vmCloneParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertVmTemplateToVm
     * @param convertVmTemplateToVmParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertVmTemplateToVmCall(List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = convertVmTemplateToVmParams;

        // create path and map variables
        String localVarPath = "/convert-vm-template-to-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertVmTemplateToVmValidateBeforeCall(List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'convertVmTemplateToVmParams' is set
        if (convertVmTemplateToVmParams == null) {
            throw new ApiException("Missing the required parameter 'convertVmTemplateToVmParams' when calling convertVmTemplateToVm(Async)");
        }
        

        okhttp3.Call localVarCall = convertVmTemplateToVmCall(convertVmTemplateToVmParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param convertVmTemplateToVmParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> convertVmTemplateToVm(List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = convertVmTemplateToVmWithHttpInfo(convertVmTemplateToVmParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param convertVmTemplateToVmParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> convertVmTemplateToVmWithHttpInfo(List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = convertVmTemplateToVmValidateBeforeCall(convertVmTemplateToVmParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param convertVmTemplateToVmParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertVmTemplateToVmAsync(List<ConvertVmTemplateToVmParams> convertVmTemplateToVmParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertVmTemplateToVmValidateBeforeCall(convertVmTemplateToVmParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVm
     * @param vmCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmCall(List<VmCreationParams> vmCreationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmCreationParams;

        // create path and map variables
        String localVarPath = "/create-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVmValidateBeforeCall(List<VmCreationParams> vmCreationParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmCreationParams' is set
        if (vmCreationParams == null) {
            throw new ApiException("Missing the required parameter 'vmCreationParams' when calling createVm(Async)");
        }
        

        okhttp3.Call localVarCall = createVmCall(vmCreationParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> createVm(List<VmCreationParams> vmCreationParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = createVmWithHttpInfo(vmCreationParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> createVmWithHttpInfo(List<VmCreationParams> vmCreationParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = createVmValidateBeforeCall(vmCreationParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmCreationParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmAsync(List<VmCreationParams> vmCreationParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVmValidateBeforeCall(vmCreationParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVmFromTemplate
     * @param vmCreateVmFromTemplateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmFromTemplateCall(List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmCreateVmFromTemplateParams;

        // create path and map variables
        String localVarPath = "/create-vm-from-template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVmFromTemplateValidateBeforeCall(List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmCreateVmFromTemplateParams' is set
        if (vmCreateVmFromTemplateParams == null) {
            throw new ApiException("Missing the required parameter 'vmCreateVmFromTemplateParams' when calling createVmFromTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = createVmFromTemplateCall(vmCreateVmFromTemplateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmCreateVmFromTemplateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> createVmFromTemplate(List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = createVmFromTemplateWithHttpInfo(vmCreateVmFromTemplateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmCreateVmFromTemplateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> createVmFromTemplateWithHttpInfo(List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = createVmFromTemplateValidateBeforeCall(vmCreateVmFromTemplateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmCreateVmFromTemplateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVmFromTemplateAsync(List<VmCreateVmFromTemplateParams> vmCreateVmFromTemplateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVmFromTemplateValidateBeforeCall(vmCreateVmFromTemplateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVm
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVmCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/delete-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVmValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling deleteVm(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVmCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskDeleteVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteVm> deleteVm(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskDeleteVm>> localVarResp = deleteVmWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteVm>> deleteVmWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = deleteVmValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVmAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskDeleteVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVmValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forceRestartVm
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceRestartVmCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/force-restart-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceRestartVmValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling forceRestartVm(Async)");
        }
        

        okhttp3.Call localVarCall = forceRestartVmCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> forceRestartVm(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = forceRestartVmWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> forceRestartVmWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = forceRestartVmValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceRestartVmAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = forceRestartVmValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forceShutDownVm
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceShutDownVmCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/poweroff-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceShutDownVmValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling forceShutDownVm(Async)");
        }
        

        okhttp3.Call localVarCall = forceShutDownVmCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> forceShutDownVm(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = forceShutDownVmWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> forceShutDownVmWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = forceShutDownVmValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceShutDownVmAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = forceShutDownVmValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVms
     * @param getVmsRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmsCall(GetVmsRequestBody getVmsRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getVmsRequestBody;

        // create path and map variables
        String localVarPath = "/get-vms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVmsValidateBeforeCall(GetVmsRequestBody getVmsRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getVmsRequestBody' is set
        if (getVmsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVmsRequestBody' when calling getVms(Async)");
        }
        

        okhttp3.Call localVarCall = getVmsCall(getVmsRequestBody, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getVmsRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;Vm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Vm> getVms(GetVmsRequestBody getVmsRequestBody, String contentLanguage) throws ApiException {
        ApiResponse<List<Vm>> localVarResp = getVmsWithHttpInfo(getVmsRequestBody, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getVmsRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;Vm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vm>> getVmsWithHttpInfo(GetVmsRequestBody getVmsRequestBody, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = getVmsValidateBeforeCall(getVmsRequestBody, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<Vm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getVmsRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmsAsync(GetVmsRequestBody getVmsRequestBody, String contentLanguage, final ApiCallback<List<Vm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVmsValidateBeforeCall(getVmsRequestBody, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<Vm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVmsConnection
     * @param getVmsConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmsConnectionCall(GetVmsConnectionRequestBody getVmsConnectionRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getVmsConnectionRequestBody;

        // create path and map variables
        String localVarPath = "/get-vms-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVmsConnectionValidateBeforeCall(GetVmsConnectionRequestBody getVmsConnectionRequestBody, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getVmsConnectionRequestBody' is set
        if (getVmsConnectionRequestBody == null) {
            throw new ApiException("Missing the required parameter 'getVmsConnectionRequestBody' when calling getVmsConnection(Async)");
        }
        

        okhttp3.Call localVarCall = getVmsConnectionCall(getVmsConnectionRequestBody, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getVmsConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return VmConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VmConnection getVmsConnection(GetVmsConnectionRequestBody getVmsConnectionRequestBody, String contentLanguage) throws ApiException {
        ApiResponse<VmConnection> localVarResp = getVmsConnectionWithHttpInfo(getVmsConnectionRequestBody, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getVmsConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;VmConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VmConnection> getVmsConnectionWithHttpInfo(GetVmsConnectionRequestBody getVmsConnectionRequestBody, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = getVmsConnectionValidateBeforeCall(getVmsConnectionRequestBody, contentLanguage, null);
        Type localVarReturnType = new TypeToken<VmConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getVmsConnectionRequestBody  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVmsConnectionAsync(GetVmsConnectionRequestBody getVmsConnectionRequestBody, String contentLanguage, final ApiCallback<VmConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVmsConnectionValidateBeforeCall(getVmsConnectionRequestBody, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<VmConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for installVmtools
     * @param installVmtoolsParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installVmtoolsCall(InstallVmtoolsParams installVmtoolsParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = installVmtoolsParams;

        // create path and map variables
        String localVarPath = "/install-vmtools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call installVmtoolsValidateBeforeCall(InstallVmtoolsParams installVmtoolsParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'installVmtoolsParams' is set
        if (installVmtoolsParams == null) {
            throw new ApiException("Missing the required parameter 'installVmtoolsParams' when calling installVmtools(Async)");
        }
        

        okhttp3.Call localVarCall = installVmtoolsCall(installVmtoolsParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param installVmtoolsParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> installVmtools(InstallVmtoolsParams installVmtoolsParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = installVmtoolsWithHttpInfo(installVmtoolsParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param installVmtoolsParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> installVmtoolsWithHttpInfo(InstallVmtoolsParams installVmtoolsParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = installVmtoolsValidateBeforeCall(installVmtoolsParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param installVmtoolsParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installVmtoolsAsync(InstallVmtoolsParams installVmtoolsParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = installVmtoolsValidateBeforeCall(installVmtoolsParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migRateVm
     * @param vmMigrateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migRateVmCall(VmMigrateParams vmMigrateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmMigrateParams;

        // create path and map variables
        String localVarPath = "/migrate-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migRateVmValidateBeforeCall(VmMigrateParams vmMigrateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmMigrateParams' is set
        if (vmMigrateParams == null) {
            throw new ApiException("Missing the required parameter 'vmMigrateParams' when calling migRateVm(Async)");
        }
        

        okhttp3.Call localVarCall = migRateVmCall(vmMigrateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmMigrateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> migRateVm(VmMigrateParams vmMigrateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = migRateVmWithHttpInfo(vmMigrateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmMigrateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> migRateVmWithHttpInfo(VmMigrateParams vmMigrateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = migRateVmValidateBeforeCall(vmMigrateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmMigrateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migRateVmAsync(VmMigrateParams vmMigrateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = migRateVmValidateBeforeCall(vmMigrateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveVmToRecycleBin
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveVmToRecycleBinCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/move-vm-to-recycle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveVmToRecycleBinValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling moveVmToRecycleBin(Async)");
        }
        

        okhttp3.Call localVarCall = moveVmToRecycleBinCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskDeleteVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteVm> moveVmToRecycleBin(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskDeleteVm>> localVarResp = moveVmToRecycleBinWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteVm>> moveVmToRecycleBinWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = moveVmToRecycleBinValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveVmToRecycleBinAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskDeleteVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveVmToRecycleBinValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rebuildVm
     * @param vmRebuildParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebuildVmCall(List<VmRebuildParams> vmRebuildParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmRebuildParams;

        // create path and map variables
        String localVarPath = "/rebuild-vm-from-snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rebuildVmValidateBeforeCall(List<VmRebuildParams> vmRebuildParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmRebuildParams' is set
        if (vmRebuildParams == null) {
            throw new ApiException("Missing the required parameter 'vmRebuildParams' when calling rebuildVm(Async)");
        }
        

        okhttp3.Call localVarCall = rebuildVmCall(vmRebuildParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmRebuildParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> rebuildVm(List<VmRebuildParams> vmRebuildParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = rebuildVmWithHttpInfo(vmRebuildParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmRebuildParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> rebuildVmWithHttpInfo(List<VmRebuildParams> vmRebuildParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = rebuildVmValidateBeforeCall(vmRebuildParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmRebuildParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebuildVmAsync(List<VmRebuildParams> vmRebuildParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rebuildVmValidateBeforeCall(vmRebuildParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recoverVmFromRecycleBin
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverVmFromRecycleBinCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/recover-vm-from-recycle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverVmFromRecycleBinValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling recoverVmFromRecycleBin(Async)");
        }
        

        okhttp3.Call localVarCall = recoverVmFromRecycleBinCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskDeleteVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskDeleteVm> recoverVmFromRecycleBin(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskDeleteVm>> localVarResp = recoverVmFromRecycleBinWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskDeleteVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskDeleteVm>> recoverVmFromRecycleBinWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = recoverVmFromRecycleBinValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverVmFromRecycleBinAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskDeleteVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverVmFromRecycleBinValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskDeleteVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVmCdRom
     * @param vmRemoveCdRomParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmCdRomCall(VmRemoveCdRomParams vmRemoveCdRomParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmRemoveCdRomParams;

        // create path and map variables
        String localVarPath = "/remove-vm-cd-rom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVmCdRomValidateBeforeCall(VmRemoveCdRomParams vmRemoveCdRomParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmRemoveCdRomParams' is set
        if (vmRemoveCdRomParams == null) {
            throw new ApiException("Missing the required parameter 'vmRemoveCdRomParams' when calling removeVmCdRom(Async)");
        }
        

        okhttp3.Call localVarCall = removeVmCdRomCall(vmRemoveCdRomParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmRemoveCdRomParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> removeVmCdRom(VmRemoveCdRomParams vmRemoveCdRomParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = removeVmCdRomWithHttpInfo(vmRemoveCdRomParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmRemoveCdRomParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> removeVmCdRomWithHttpInfo(VmRemoveCdRomParams vmRemoveCdRomParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = removeVmCdRomValidateBeforeCall(vmRemoveCdRomParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmRemoveCdRomParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmCdRomAsync(VmRemoveCdRomParams vmRemoveCdRomParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVmCdRomValidateBeforeCall(vmRemoveCdRomParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVmDisk
     * @param vmRemoveDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmDiskCall(VmRemoveDiskParams vmRemoveDiskParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmRemoveDiskParams;

        // create path and map variables
        String localVarPath = "/remove-vm-disk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVmDiskValidateBeforeCall(VmRemoveDiskParams vmRemoveDiskParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmRemoveDiskParams' is set
        if (vmRemoveDiskParams == null) {
            throw new ApiException("Missing the required parameter 'vmRemoveDiskParams' when calling removeVmDisk(Async)");
        }
        

        okhttp3.Call localVarCall = removeVmDiskCall(vmRemoveDiskParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmRemoveDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> removeVmDisk(VmRemoveDiskParams vmRemoveDiskParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = removeVmDiskWithHttpInfo(vmRemoveDiskParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmRemoveDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> removeVmDiskWithHttpInfo(VmRemoveDiskParams vmRemoveDiskParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = removeVmDiskValidateBeforeCall(vmRemoveDiskParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmRemoveDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmDiskAsync(VmRemoveDiskParams vmRemoveDiskParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVmDiskValidateBeforeCall(vmRemoveDiskParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVmNic
     * @param vmRemoveNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmNicCall(VmRemoveNicParams vmRemoveNicParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmRemoveNicParams;

        // create path and map variables
        String localVarPath = "/remove-vm-nic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVmNicValidateBeforeCall(VmRemoveNicParams vmRemoveNicParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmRemoveNicParams' is set
        if (vmRemoveNicParams == null) {
            throw new ApiException("Missing the required parameter 'vmRemoveNicParams' when calling removeVmNic(Async)");
        }
        

        okhttp3.Call localVarCall = removeVmNicCall(vmRemoveNicParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmRemoveNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> removeVmNic(VmRemoveNicParams vmRemoveNicParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = removeVmNicWithHttpInfo(vmRemoveNicParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmRemoveNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> removeVmNicWithHttpInfo(VmRemoveNicParams vmRemoveNicParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = removeVmNicValidateBeforeCall(vmRemoveNicParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmRemoveNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmNicAsync(VmRemoveNicParams vmRemoveNicParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVmNicValidateBeforeCall(vmRemoveNicParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVmToFolder
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmToFolderCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/remove-vm-from-folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVmToFolderValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling removeVmToFolder(Async)");
        }
        

        okhttp3.Call localVarCall = removeVmToFolderCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> removeVmToFolder(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = removeVmToFolderWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> removeVmToFolderWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = removeVmToFolderValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVmToFolderAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVmToFolderValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restartVm
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartVmCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/restart-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartVmValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling restartVm(Async)");
        }
        

        okhttp3.Call localVarCall = restartVmCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> restartVm(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = restartVmWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> restartVmWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = restartVmValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartVmAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartVmValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeVm
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeVmCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/resume-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeVmValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling resumeVm(Async)");
        }
        

        okhttp3.Call localVarCall = resumeVmCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> resumeVm(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = resumeVmWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> resumeVmWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = resumeVmValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeVmAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeVmValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackVm
     * @param vmRollbackParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackVmCall(VmRollbackParams vmRollbackParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmRollbackParams;

        // create path and map variables
        String localVarPath = "/rollback-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackVmValidateBeforeCall(VmRollbackParams vmRollbackParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmRollbackParams' is set
        if (vmRollbackParams == null) {
            throw new ApiException("Missing the required parameter 'vmRollbackParams' when calling rollbackVm(Async)");
        }
        

        okhttp3.Call localVarCall = rollbackVmCall(vmRollbackParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmRollbackParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> rollbackVm(VmRollbackParams vmRollbackParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = rollbackVmWithHttpInfo(vmRollbackParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmRollbackParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> rollbackVmWithHttpInfo(VmRollbackParams vmRollbackParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = rollbackVmValidateBeforeCall(vmRollbackParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmRollbackParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackVmAsync(VmRollbackParams vmRollbackParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackVmValidateBeforeCall(vmRollbackParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shutDownVm
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shutDownVmCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/shutdown-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shutDownVmValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling shutDownVm(Async)");
        }
        

        okhttp3.Call localVarCall = shutDownVmCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> shutDownVm(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = shutDownVmWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> shutDownVmWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = shutDownVmValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shutDownVmAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = shutDownVmValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startVm
     * @param vmStartParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startVmCall(VmStartParams vmStartParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmStartParams;

        // create path and map variables
        String localVarPath = "/start-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startVmValidateBeforeCall(VmStartParams vmStartParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmStartParams' is set
        if (vmStartParams == null) {
            throw new ApiException("Missing the required parameter 'vmStartParams' when calling startVm(Async)");
        }
        

        okhttp3.Call localVarCall = startVmCall(vmStartParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmStartParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> startVm(VmStartParams vmStartParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = startVmWithHttpInfo(vmStartParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmStartParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> startVmWithHttpInfo(VmStartParams vmStartParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = startVmValidateBeforeCall(vmStartParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmStartParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startVmAsync(VmStartParams vmStartParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = startVmValidateBeforeCall(vmStartParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendVm
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendVmCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmOperateParams;

        // create path and map variables
        String localVarPath = "/suspend-vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendVmValidateBeforeCall(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmOperateParams' is set
        if (vmOperateParams == null) {
            throw new ApiException("Missing the required parameter 'vmOperateParams' when calling suspendVm(Async)");
        }
        

        okhttp3.Call localVarCall = suspendVmCall(vmOperateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> suspendVm(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = suspendVmWithHttpInfo(vmOperateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> suspendVmWithHttpInfo(VmOperateParams vmOperateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = suspendVmValidateBeforeCall(vmOperateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmOperateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendVmAsync(VmOperateParams vmOperateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendVmValidateBeforeCall(vmOperateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVm
     * @param vmUpdateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmCall(VmUpdateParams vmUpdateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmUpdateParams;

        // create path and map variables
        String localVarPath = "/update-vm-basic-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVmValidateBeforeCall(VmUpdateParams vmUpdateParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmUpdateParams' is set
        if (vmUpdateParams == null) {
            throw new ApiException("Missing the required parameter 'vmUpdateParams' when calling updateVm(Async)");
        }
        

        okhttp3.Call localVarCall = updateVmCall(vmUpdateParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmUpdateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> updateVm(VmUpdateParams vmUpdateParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = updateVmWithHttpInfo(vmUpdateParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmUpdateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> updateVmWithHttpInfo(VmUpdateParams vmUpdateParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateVmValidateBeforeCall(vmUpdateParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmUpdateParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmAsync(VmUpdateParams vmUpdateParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVmValidateBeforeCall(vmUpdateParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVmDisk
     * @param vmUpdateDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmDiskCall(VmUpdateDiskParams vmUpdateDiskParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmUpdateDiskParams;

        // create path and map variables
        String localVarPath = "/update-vm-disk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVmDiskValidateBeforeCall(VmUpdateDiskParams vmUpdateDiskParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmUpdateDiskParams' is set
        if (vmUpdateDiskParams == null) {
            throw new ApiException("Missing the required parameter 'vmUpdateDiskParams' when calling updateVmDisk(Async)");
        }
        

        okhttp3.Call localVarCall = updateVmDiskCall(vmUpdateDiskParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmUpdateDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> updateVmDisk(VmUpdateDiskParams vmUpdateDiskParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = updateVmDiskWithHttpInfo(vmUpdateDiskParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmUpdateDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> updateVmDiskWithHttpInfo(VmUpdateDiskParams vmUpdateDiskParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateVmDiskValidateBeforeCall(vmUpdateDiskParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmUpdateDiskParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmDiskAsync(VmUpdateDiskParams vmUpdateDiskParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVmDiskValidateBeforeCall(vmUpdateDiskParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVmNic
     * @param vmUpdateNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmNicCall(VmUpdateNicParams vmUpdateNicParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vmUpdateNicParams;

        // create path and map variables
        String localVarPath = "/update-vm-nic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentLanguage != null) {
            localVarHeaderParams.put("content-language", localVarApiClient.parameterToString(contentLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVmNicValidateBeforeCall(VmUpdateNicParams vmUpdateNicParams, String contentLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vmUpdateNicParams' is set
        if (vmUpdateNicParams == null) {
            throw new ApiException("Missing the required parameter 'vmUpdateNicParams' when calling updateVmNic(Async)");
        }
        

        okhttp3.Call localVarCall = updateVmNicCall(vmUpdateNicParams, contentLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param vmUpdateNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return List&lt;WithTaskVm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<WithTaskVm> updateVmNic(VmUpdateNicParams vmUpdateNicParams, String contentLanguage) throws ApiException {
        ApiResponse<List<WithTaskVm>> localVarResp = updateVmNicWithHttpInfo(vmUpdateNicParams, contentLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param vmUpdateNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @return ApiResponse&lt;List&lt;WithTaskVm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WithTaskVm>> updateVmNicWithHttpInfo(VmUpdateNicParams vmUpdateNicParams, String contentLanguage) throws ApiException {
        okhttp3.Call localVarCall = updateVmNicValidateBeforeCall(vmUpdateNicParams, contentLanguage, null);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param vmUpdateNicParams  (required)
     * @param contentLanguage  (optional, default to en-US)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVmNicAsync(VmUpdateNicParams vmUpdateNicParams, String contentLanguage, final ApiCallback<List<WithTaskVm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVmNicValidateBeforeCall(vmUpdateNicParams, contentLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<WithTaskVm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
